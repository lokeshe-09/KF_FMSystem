# Generated by Django 4.2.7 on 2025-09-25 17:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('farms', '0013_plantdiseaseprediction_image_format_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='notification',
            name='notification_type',
            field=models.CharField(choices=[('daily_task', 'Daily Task Submission'), ('farm_created', 'Farm Created'), ('user_created', 'User Created'), ('harvest_due', 'Harvest Due'), ('harvest_overdue', 'Harvest Overdue'), ('harvest_reminder', 'Harvest Reminder'), ('fertigation_due', 'Fertigation Due'), ('fertigation_overdue', 'Fertigation Overdue'), ('admin_message', 'Admin Message'), ('farm_announcement', 'Farm Announcement'), ('task_reminder', 'Task Reminder'), ('calendar_event', 'Calendar Event'), ('general', 'General')], default='general', max_length=20),
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Event title/name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the event', null=True)),
                ('event_type', models.CharField(choices=[('meeting', 'Meeting'), ('planting', 'Planting'), ('harvesting', 'Harvesting'), ('spraying', 'Spraying'), ('fertilizing', 'Fertilizing'), ('irrigation', 'Irrigation'), ('maintenance', 'Maintenance'), ('inspection', 'Inspection'), ('training', 'Training'), ('reminder', 'Reminder'), ('deadline', 'Deadline'), ('appointment', 'Appointment'), ('other', 'Other')], default='other', help_text='Type of event', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Priority level', max_length=10)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('postponed', 'Postponed')], default='scheduled', help_text='Current status', max_length=15)),
                ('start_date', models.DateTimeField(help_text='Event start date and time')),
                ('end_date', models.DateTimeField(help_text='Event end date and time')),
                ('is_all_day', models.BooleanField(default=False, help_text='All-day event flag')),
                ('location', models.CharField(blank=True, help_text='Event location (farm section, meeting room, etc.)', max_length=300, null=True)),
                ('recurrence_type', models.CharField(choices=[('none', 'No Repeat'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], default='none', help_text='Recurrence pattern', max_length=10)),
                ('recurrence_end_date', models.DateTimeField(blank=True, help_text='When recurrence should stop', null=True)),
                ('recurrence_count', models.PositiveIntegerField(blank=True, help_text='Number of occurrences', null=True)),
                ('notify_before_minutes', models.PositiveIntegerField(default=15, help_text='Send notification X minutes before event')),
                ('enable_notifications', models.BooleanField(default=True, help_text='Enable notifications for this event')),
                ('notification_sent', models.BooleanField(default=False, help_text='Track if notification has been sent')),
                ('notes', models.TextField(blank=True, help_text='Additional notes or instructions', null=True)),
                ('attachments', models.JSONField(blank=True, default=list, help_text='Attached files or links')),
                ('color', models.CharField(default='#3B82F6', help_text='Event color in calendar (hex format)', max_length=7)),
                ('completion_notes', models.TextField(blank=True, help_text='Notes added when marking as completed', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When event was marked as completed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ManyToManyField(blank=True, help_text='Users assigned to this event', related_name='assigned_events', to=settings.AUTH_USER_MODEL)),
                ('completed_by', models.ForeignKey(blank=True, help_text='User who marked event as completed', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completed_events', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(help_text='User who created the event', on_delete=django.db.models.deletion.CASCADE, related_name='created_events', to=settings.AUTH_USER_MODEL)),
                ('farm', models.ForeignKey(help_text='Associated farm', on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to='farms.farm')),
                ('parent_event', models.ForeignKey(blank=True, help_text='Parent event for recurring instances', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recurring_instances', to='farms.calendarevent')),
            ],
            options={
                'ordering': ['-start_date', '-created_at'],
                'indexes': [models.Index(fields=['farm', '-start_date'], name='farms_calen_farm_id_2be712_idx'), models.Index(fields=['created_by', '-start_date'], name='farms_calen_created_c4dc5d_idx'), models.Index(fields=['event_type', '-start_date'], name='farms_calen_event_t_428c9c_idx'), models.Index(fields=['status'], name='farms_calen_status_bca0c3_idx'), models.Index(fields=['priority'], name='farms_calen_priorit_268ffc_idx'), models.Index(fields=['start_date', 'end_date'], name='farms_calen_start_d_c6cd05_idx'), models.Index(fields=['recurrence_type'], name='farms_calen_recurre_79f1f9_idx'), models.Index(fields=['enable_notifications', 'notification_sent'], name='farms_calen_enable__9ec4ad_idx'), models.Index(fields=['-created_at'], name='farms_calen_created_b76e1d_idx')],
            },
        ),
    ]
